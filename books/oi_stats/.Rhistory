})
plot(coveragel)
text(coveragel, labels = lambdavals, cex = 0.7)
data(sleep)
head(sleep)
data(sleep)
sleep
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
g1
g2
difference
mn <- mean(difference)
s <- sd(difference)
n <- 10
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
data(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
data(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
mn + c(-1, 1) * qt(0.975, n-1) * s / sqrt(n)
test1 <- mn + c(-1, 1) * qt(0.975, n-1) * s / sqrt(n)
test 1
test1
mn + c(-1, 1) * qt(0.975, n-1) * s / sqrt(n)
t.test(difference)
plot(difference)
t.test(extra ~ I(relevel(group,2)), paired = T, data = sleep)
mn + c(-1, 1) * qt(0.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g1, g2, paired = T)
t.test(extra ~ I(relevel(group,2)), paired = T, data = sleep)
mn + c(-1, 1) * qt(0.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = T)
t.test(extra ~ I(relevel(group,2)), paired = T, data = sleep)
?norm
pnorm
?pnorm
pnorm(90, mean = 100, sd = 10)
pnorm(93, mean = 100, sd = 10)
qnorm(90, mean = 100, sd = 10)
qnorm(0.9, mean = 100, sd = 10)
qnorm(0.1, mean = 100, sd = 10)
qnorm(0.2419637, mean = 100, sd = 10)
dnorm(90, mean = 100, sd = 10)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
mn + c(-1, 1) * qt(0.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = T)
t.test(extra ~ I(relevel(group,2)), paired = T, data = sleep)
n1 <- length(g1); n2 <- length(g2)
mdiff <- mean(g2) - mean(g1)
sp <- ((n2 - 1) * sd(g2)^2 + (n1 - 1) * sd(g1)^2) / (n1+n2-2)
semdiff <- sp * (1/n1 + 1/n2)^0.5
mdiff + c(-1,1) * qt(0.975, n1 + n2 - 2) * semdiff
data(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
n1 <- length(g1); n2 <- length(g2)
mdiff <- mean(g2) - mean(g1)
sp <- ((n2 - 1) * sd(g2)^2 + (n1 - 1) * sd(g1)^2) / (n1+n2-2)
semdiff <- sp * (1/n1 + 1/n2)^0.5
mdiff + c(-1,1) * qt(0.975, n1 + n2 - 2) * semdiff
data(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
n1 <- length(g1); n2 <- length(g2)
mdiff <- mean(g2) - mean(g1)
sp <- sqrt(((n2 - 1) * sd(g2)^2 + (n1 - 1) * sd(g1)^2) / (n1+n2-2))
semdiff <- sp * (1/n1 + 1/n2)^0.5
mdiff + c(-1,1) * qt(0.975, n1 + n2 - 2) * semdiff
t.test(g2, g1, paired = F, var.equal = T)
t.test(g2, g1, paired = F, var.equal = T)$conf
t.test(g2, g1, paired = F, var.equal = T)$conf.int
t.test(g2, g1, paired = F, var.equal = T)$conf
download.packages("reshape2")
library(reshape2)
ight Example
library(reshape2); library(datasets); data(ChickWeight)
ChickWeight
ickWeight data is on Chick, Diet, Time level and gives weight values
library(reshape2); library(datasets); data(ChickWeight)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
?dcast
?t.test
names(wideCW)[-1:2]
names(wideCW)[-(1:2)]
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
names(wideCW)[-(1:2)]
mutate(wideCW, gain = time21 - time0)
### ChickWeight data is on Chick, Diet, Time level and gives weight values
library(reshape2); library(datasets); data(ChickWeight); library(dplyr)
### Change level of data to Diet, Chick level and add columns for each possible
### Time dimension. Value column is set to Weight.
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
mutate(wideCW, gain = time21 - time0)
download.packages("dplyr")
getwd()
### ChickWeight data is on Chick, Diet, Time level and gives weight values
library(reshape2); library(datasets); data(ChickWeight); library(dplyr)
### Change level of data to Diet, Chick level and add columns for each possible
### Time dimension. Value column is set to Weight.
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
mutate(wideCW, gain = time21 - time0)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
mutate(wideCW, gain = time21 - time0)
library(reshape2); library(datasets); data(ChickWeight); library(dplyr)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1:2)] <- paste("time", names(wideCW)[-(1:2)], sep = "")
mutate(wideCW, gain = time21 - time0)
wideCW <- mutate(wideCW, gain = time21 - time0)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
wideCW14
gain ~ Diet
gain ~ Diet
?~
help(~)
help("~")
t.test(gain ~ Diet, paired = F, var.equal = T, data = wideCW14)
t.test(g2, g1, paired = T)
t.test(g2, g1, paired = F, var.equal = T)$conf
t.test(g2, g1, paired = F, var.equal = T)
?t.test
1100 + c(-1,1) * qt(0.975, 8) * 30 / sqrt(9)
qt(0.975, 9)
2 / qt(0.975, 9)
-2 + c(-1,1) * qt(0.975, 8) * 2.1 / sqrt(9)
-2 + c(-1,1) * qt(0.975, 8) * 1.5 / sqrt(9)
-2 + c(-1,1) * qt(0.975, 8) * 2.6 / sqrt(9)
-2 + c(-1,1) * qt(0.975, 8) * 0.3/ sqrt(9)
sp = sqrt((9*0.6 + 9*0.68)/18)
(2 - 5) + c(-1,1) * qt(0.975, 18) * sq * sqrt(0.2)
sp = sqrt((9*0.6 + 9*0.68)/18)
(2 - 5) + c(-1,1) * qt(0.975, 18) * sp * sqrt(0.2)
(3 - 5) + c(-1,1) * qt(0.975, 18) * sp * sqrt(0.2)
?qnorm
?qt
qt(0.95,15)
qt(0.95,15, lower.tail = T)
qt(0.95,15, lower.tail = F)
?qnorm
z = qnorm(0.975)
z
(4-6) + c(-1,1) * z * ((0.5^2 / 100) + (2^2 / 100))^0.5
(6 - 4) + c(-1,1) * z * ((0.5^2 / 100) + (2^2 / 100))^0.5
sp = sqrt((8 * 1.5^2 + 8 * 1.8^2)/16)
(-3 - 1) * c(-1,1) * qt(0.95, 16) * sp * (1/9 + 1/9)^0.5
sp = sqrt((8 * 1.5^2 + 8 * 1.8^2)/16)
(-3 - 1) * c(-1,1) * qt(0.95, 16) * sp * (1/9 + 1/9)^0.5
sp
-4 * c(-1,1) * qt(0.95, 16) * sp * (1/9 + 1/9)^0.5
-4 + c(-1,1) * qt(0.95, 16) * sp * (1/9 + 1/9)^0.5
sp = sqrt((9*0.6 + 9*0.68)/18)
(3 - 5) + c(-1,1) * qt(0.975, 18) * sp * sqrt(0.2)
z = qnorm(0.975)
(6 - 4) + c(-1,1) * z * ((0.5^2 / 100) + (2^2 / 100))^0.5
sp = sqrt((8 * 1.5^2 + 8 * 1.8^2)/16)
-4 + c(-1,1) * qt(0.95, 16) * sp * (1/9 + 1/9)^0.5
hist(runif(1000))
=
mns <- NULL
for (i in 1:1000) {mns = c(mns, mean(runif(40)))}
hist(mns)
hist(runif(1000))
mns <- NULL
for (i in 1:1000) {mns = c(mns, mean(runif(40)))}
hist(mns)
hist(rexp(1000, 0.2))
hist(rexp(1000, 0.2))
hist(rexp(1000, 0.2))
hist(rexp(1000, 0.2))
hist(rexp(1000, 0.2))
hist(rexp(1000, 0.2))
hist(rexp(1000, 0.2))
hist(rexp(1000, 0.2))
for (i in 1:1000) {means = c(means, mean(rexp(40, 0.2)))}
means <- NULL
for (i in 1:1000) {means = c(means, mean(rexp(40, 0.2)))}
hist(means)
mean(means)
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
mean(rexp(40,0.2))
var(means)
var(rexp(40, 0.2))
var(rexp(1000, 0.2))
sd(rexp(1000, 0.2))
sd(rexp(1000, 0.2))
mean(rexp(1000,0.2))
sd(rexp(1000, 0.2))
hist(means)
mean(means)
var(means)
sd(means)
exp.dist <- rexp(1000, 0.2)
hist(exp.dist)
mean(exp.dist)
sd(exp.dist)
exp.dist
means
hist(means)
mean(exp.dist)
mean(means)
exp.dist <- rexp(1000, 0.2)
mean(exp.dist)
mean(means)
var(means)
var(exp.dist)
var(exp.dist)
var(means)
vars <- NULL
for (i in 1:1000) {vars = c(vars, var(rexp(40, 0.2)))}
hist(vars)
vars <- NULL
for (i in 1:1000) {vars = c(vars, var(rexp(40, 0.2)))}
hist(vars)
vars <- NULL
for (i in 1:1000) {vars = c(vars, var(rexp(40, 0.2)))}
hist(vars)
vars <- NULL
for (i in 1:1000) {vars = c(vars, var(rexp(40, 0.2)))}
hist(vars)
vars <- NULL
for (i in 1:1000) {vars = c(vars, var(rexp(40, 0.2)))}
hist(vars)
vars <- NULL
for (i in 1:1000) {vars = c(vars, var(rexp(40, 0.2)))}
hist(vars)
vars <- NULL
for (i in 1:1000) {vars = c(vars, var(rexp(40, 0.2)))}
hist(vars)
mean(vars)
mean(vars)
var(exp.dist)
var(means)
var(exp.dist)
mean(vars)
var(means)
var(exp.dist)
mean(vars)
var(vars)
var(means)
mean(vars)
sd(vars)
var(exp.dist)
mean(vars)
sd(vars)
var(means)
?z.test
t.test(means)
qnorm(means)
?qnorms
?qnorm
?quartile
?quar
?q
summary(means)
quantile(means, (0.05, 0.95))
quantile(means, c(0.05, 0.95))
mean(means) + c(-1, 1) * qnorm(0.95) * sd(means)/sqrt(1000)
?quantile
qnorm(0.95)
sd(means)
qnorm(0.95, mean = mean(means), sd = sd(means))
qnorm(c(0.05, 0.95), mean = mean(means), sd = sd(means))
quantile(means, c(0.01, 0.05, 0.1, 0.9, 0.95, 0.099))
qnorm(c(0.01, 0.05, 0.1, 0.9, 0.95, 0.099), mean = mean(means), sd = sd(means))
library(datasets)
data(ToothGrowth)
head(ToothGrowth)
ToothGrowth
plot(ToothGrowth)
summary(ToothGrowth)
library(datasets)
library(reshape2)
library(dlypr)
data(ToothGrowth)
library(dplyr)
oj <- subset(ToothGrowth, supp = "OJ")
oj <- subset(ToothGrowth, supp == "OJ")
vc <- subset(ToothGrowth, supp == "VC")
corr(of$len, oj$dose)
cor(of$len, oj$dose)
?correlation
?corr
cor(of$len, oj$dose)
cor(oj$len, oj$dose)
cor(vc$len, vc$dose)
oj
vc
plot(oj)
plot(oj$len, oj$dose)
plot(vc$len, vc$dose)
plot(vc$len, vc$dose)
plot(oj$len, oj$dose)
plot(vc$len, vc$dose)
tg0.5 <- subset(ToothGrowth, dose == 0.5)
plot(tg0.5$len, tg0.5$dose)
plot(tg0.5$len, tg0.5$supp)
plot(tg1$len, tg1$supp)
plot(tg2$len, tg2$supp)
tg1 <- subset(ToothGrowth, dose == 1.0)
tg2 <- subset(ToothGrowth, dose == 2.0)
plot(tg1$len, tg1$supp)
plot(tg2$len, tg2$supp)
plot(oj$len, oj$dose)
plot(vc$len, vc$dose)
plot(tg0.5$len, tg0.5$supp)
plot(tg1$len, tg1$supp)
plot(tg2$len, tg2$supp)
summary(ToothGrowth)
plot(ToothGrowth$len, ToothGrowth$dose)
hist(ToothGrowth$len, ToothGrowth$dose)
line(ToothGrowth$len, ToothGrowth$dose)
plot(ToothGrowth$len, ToothGrowth$dose)
tg0.5_1 <- subset(ToothGrowth, dose %in% c(0.5, 1))
tg0.5_2 <- subset(ToothGrowth, dose %in% c(0.5, 2))
tg1_2 <- subset(ToothGrowth, dose %in% c(1, 2))
t.test(len ~ dose, paired=F, var.equal=T, data=tg0.5_1)
t.test(len ~ dose, paired=F, var.equal=T, data=tg0.5_2)
t.test(len ~ dose, paired=F, var.equal=T, data=tg1_2)
tg0.5_1 <- subset(ToothGrowth, dose %in% c(0.5, 1))
tg0.5_2 <- subset(ToothGrowth, dose %in% c(0.5, 2))
tg1_2 <- subset(ToothGrowth, dose %in% c(1, 2))
tg0.5 <- subset(ToothGrowth, dose == 0.5)
tg1 <- subset(ToothGrowth, dose == 1.0)
tg2 <- subset(ToothGrowth, dose == 2.0)
t.test(len ~ supp, paired=F, var.equal=T, data=tg0.5)
t.test(len ~ supp, paired=F, var.equal=T, data=tg1)
t.test(len ~ supp, paired=F, var.equal=T, data=tg2)
alpha = 0.05
z = qnorm(1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = F)
mu0 = 30
mua = 32
sigma = 4
n = 16
alpha = 0.05
z = qnorm(1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = F)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = F)
pnorm(mua + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = F)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma=slider(1, 10, step=1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1,initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
library(ggplot2)
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mu0, sd = sigma/sqrt(n)),
size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line",
args = list(mean = mua, sd = sigma/sqrt(n)),
size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma=slider(1, 10, step=1, initial= 4),
mua = slider(30, 35, step = 1, initial = 32),
n = slider(1, 50, step = 1,initial = 16),
alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
save.image("C:/Chris/R/.RData")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
mu <- mean(x)
mu2 <- mean(x*w)
sum(1, 2)
sum(w * (x - mu)^2)
sum(w * (x - mu2)^2)
sum(w * (x - 0.3)^2)
sum(w * (x - 0.1471)^2)
sum(w * (x - 1.077)^2)
sum(w * (x - mu2)^2)
sum(w * (x - mu)^2)
sum(w * (x - 0.3)^2)
sum(w * (x - 0.2575)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
coefTable
fit <- lm(y ~ x);
summary(fit)$coefficients
fit
summary(fit)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]) / 10
seq(min(x), max(x), length = 100)
?sep
?seq
seq(0,1, length = 5)
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
?predict
predict(fit, newdata= newx,interval = ("confidence"))
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1
p1$x = newx$x
p2$x = newx$x
p1
dat = rbind(p1, p2)
names(dat)[1]
names(dat)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
install.packages("IPSUR")
library(IPSUR)
read(IPSUR)
complex(-1)
as.complex(-1)
?complex
?typeof
?class
?type
install.packages("pdflatex")
install.packages("MiKTeX")
install.packages(c("BH", "broom", "DT", "evaluate", "formatR", "highr", "htmlwidgets", "knitr", "manipulate", "markdown", "mnormt", "plyr", "pryr", "psych", "Rcpp", "rmarkdown", "scales", "shiny", "stringr"))
install.packages(c("BH", "broom", "DT", "evaluate", "formatR",
))
install.packages(c("BH", "broom", "dplyr", "DT", "evaluate", "formatR", "highr", "htmlwidgets", "knitr", "manipulate", "markdown", "mnormt", "plyr", "pryr", "psych", "Rcpp", "rmarkdown", "scales", "shiny", "stringr"))
install.packages(c("BH", "broom", "dplyr", "DT", "evaluate",
"formatR"))
install.packages(c("highr", "knitr", "manipulate", "markdown", "mnormt", "plyr", "pryr", "psych", "Rcpp", "rmarkdown", "scales", "shiny", "stringr"))
install.packages(c("highr", "knitr", "manipulate", "markdown",
"mnormt"))
install.packages(c("plyr", "pryr", "psych", "Rcpp", "rmarkdown", "scales", "shiny", "stringr"))
install.packages(c("plyr", "pryr", "psych", "Rcpp", "rmarkdown",
"scales"))
install.packages(c("plyr", "pryr", "psych", "Rcpp", "rmarkdown",
"scales"))
install.packages(c("shiny", "stringr"))
setwd("C:/Chris/stats/oi_stats")
setwd("C:/Chris/stats/oi_stats")
install.packages("openintro")
?load.table
?read.table
read.table("\data\email50.txt", sep = "\t")
read.table("/data/email50.txt", sep = "\t")
read.table("data/email50.txt", sep = "\t")
email50 <- read.table("data/email50.txt", header = TRUE, sep = "\t")
head(email50)
summary(email50)
